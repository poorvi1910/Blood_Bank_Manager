const { executeQuery } = require('./db'); // Assuming db.js exports executeQuery correctly

// --- Donor Registration Procedure ---
async function createRegisterDonorProcedure() {
    // Note: DonorID is auto-generated by the DB (IDENTITY column)
    // Note: DonationID is nullable and not set during initial registration
    const procQuery = `
        CREATE OR REPLACE PROCEDURE REGISTER_DONOR (
            p_d_name IN Donors.D_Name%TYPE,
            p_d_phoneNo IN Donors.D_PhoneNo%TYPE,
            p_password IN Donors.Password%TYPE, -- Added password parameter
            p_d_dob IN VARCHAR2,                -- Input as String (YYYY-MM-DD)
            p_d_gender IN Donors.D_Gender%TYPE,
            p_d_bloodGroup IN Donors.D_BloodGroup%TYPE,
            p_d_address IN Donors.D_Address%TYPE,
            p_health_status IN Donors.HealthStatus%TYPE,
            p_last_donation_date IN VARCHAR2,   -- Input as String (YYYY-MM-DD) or NULL
            p_weight IN Donors.Weight%TYPE
        )
        AS
        BEGIN
            INSERT INTO Donors (
                D_Name, D_PhoneNo, Password, D_DOB, D_Gender, D_BloodGroup,
                D_Address, HealthStatus, LastDonationDate, Weight
                -- DonorID is auto-generated, DonationID defaults to NULL
            )
            VALUES (
                p_d_name, p_d_phoneNo, p_password, -- Added password
                TO_DATE(p_d_dob, 'YYYY-MM-DD'),     -- Convert DOB string to DATE
                p_d_gender, p_d_bloodGroup, p_d_address, p_health_status,
                CASE
                    WHEN p_last_donation_date IS NULL OR p_last_donation_date = '' THEN NULL
                    ELSE TO_DATE(p_last_donation_date, 'YYYY-MM-DD') -- Convert optional date string to DATE
                END,
                p_weight
            );
            COMMIT;
        END;
    `; // Removed trailing semicolon after END;

    try {
        await executeQuery(procQuery, {}); // Use executeQuery which should handle DDL
        console.log("Stored Procedure 'REGISTER_DONOR' created/replaced successfully.");
    } catch (err) {
        console.error("Error creating/replacing 'REGISTER_DONOR':", err);
        // Throw error to prevent app start if critical procedures fail?
        // throw err;
    }
}

// --- Admin Registration Procedure ---
async function createRegisterAdminProcedure() {
    // Note: AdminID is auto-generated by the DB (IDENTITY column)
    const procQuery = `
        CREATE OR REPLACE PROCEDURE REGISTER_ADMIN (
            p_a_name IN Administrators.A_Name%TYPE,
            p_blood_bank_id IN Administrators.BloodBankID%TYPE,
            p_a_address IN Administrators.A_Address%TYPE,
            p_a_phoneNo IN Administrators.A_PhoneNo%TYPE,
            p_password IN Administrators.Password%TYPE
        )
        AS
        BEGIN
            INSERT INTO Administrators (
                A_Name, BloodBankID, A_Address, A_PhoneNo, Password
                -- AdminID is auto-generated
            )
            VALUES (
                p_a_name, p_blood_bank_id, p_a_address, p_a_phoneNo, p_password
            );
            COMMIT;
        END;
    `; // Removed trailing semicolon after END;

    try {
        await executeQuery(procQuery, {});
        console.log("Stored Procedure 'REGISTER_ADMIN' created/replaced successfully.");
    } catch (err) {
        console.error("Error creating/replacing 'REGISTER_ADMIN':", err);
        // throw err;
    }
}

// --- Donor Login Procedure ---
async function createLoginDonorProcedure() {
    const procQuery = `
        CREATE OR REPLACE PROCEDURE LOGIN_DONOR(
            p_d_name IN Donors.D_Name%TYPE,      -- Use D_Name for login
            p_password IN Donors.Password%TYPE,
            is_valid OUT NUMBER                 -- 1 if valid, 0 otherwise
        )
        AS
            v_count NUMBER;
        BEGIN
            SELECT COUNT(*) INTO v_count
            FROM Donors
            WHERE D_Name = p_d_name AND Password = p_password; -- Compare hashed password in real app

            IF v_count = 1 THEN
                is_valid := 1;
            ELSE
                is_valid := 0;
            END IF;
        END;
    `; // Removed trailing semicolon after END;

    try {
        await executeQuery(procQuery, {});
        console.log("Stored Procedure 'LOGIN_DONOR' created/replaced successfully.");
    } catch (err) {
        console.error("Error creating/replacing 'LOGIN_DONOR':", err);
        // throw err;
    }
}

// --- Admin Login Procedure ---
async function createLoginAdminProcedure() {
    const procQuery = `
        CREATE OR REPLACE PROCEDURE LOGIN_ADMIN(
            p_a_name IN Administrators.A_Name%TYPE,  -- Use A_Name for login
            p_password IN Administrators.Password%TYPE,
            is_valid OUT NUMBER                     -- 1 if valid, 0 otherwise
        )
        AS
            v_count NUMBER;
        BEGIN
            SELECT COUNT(*) INTO v_count
            FROM Administrators
            WHERE A_Name = p_a_name AND Password = p_password; -- Compare hashed password in real app

             IF v_count = 1 THEN
                is_valid := 1;
            ELSE
                is_valid := 0;
            END IF;
        END;
    `; // Removed trailing semicolon after END;

    try {
        await executeQuery(procQuery, {});
        console.log("Stored Procedure 'LOGIN_ADMIN' created/replaced successfully.");
    } catch (err) {
        console.error("Error creating/replacing 'LOGIN_ADMIN':", err);
        // throw err;
    }
}

// --- Function to Initialize All Procedures ---
async function initializeProcedures() {
    console.log("Initializing database procedures...");
    await createRegisterDonorProcedure();
    await createRegisterAdminProcedure();
    await createLoginDonorProcedure();
    await createLoginAdminProcedure();
    console.log("Database procedures initialization complete.");
}

module.exports = { initializeProcedures };